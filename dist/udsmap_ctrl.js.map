{"version":3,"sources":["../src/udsmap_ctrl.js"],"names":["MetricsPanelCtrl","_","TimeSeries","supercluster","panelDefaults","bgColor","graphSettings","fontColor","gridColor","fontSize","legendType","ignoreTimeInfluxDB","limitAspectRatio","aspectRatio","UdsMapCtrl","$scope","$injector","$rootScope","defaultsDeep","panel","events","on","onInitEditMode","bind","onPanelTeardown","render","onRender","onDataReceived","onDataError","data","canvasid","Math","random","replace","divid","ctx","map","markers","index","ready","updateMap","series","bounds","getBounds","bbox","getWest","getSouth","getEast","getNorth","clusters","getClusters","floor","getZoom","clearLayers","addData","canvasOverlay","params","canvas","getContext","clearRect","width","height","fillStyle","i","length","d","contains","dot","_map","latLngToContainerPoint","beginPath","arc","x","y","PI","fill","closePath","document","getElementById","L","setView","osmUrl","osm","TileLayer","minZoom","maxZoom","addLayer","geoJson","pointToLayer","createClusterIcon","addTo","bound","that","e","clusterId","layer","feature","properties","cluster_id","center","latlng","expansionZoom","getClusterExpansionZoom","flyTo","cluster","marker","count","point_count","size","icon","divIcon","html","point_count_abbreviated","className","iconSize","point","fulldata","dataList","rows","forEach","element","push","type","scalerank","name","comment","name_alt","lat_y","long_x","region","subregion","featureclass","geometry","coordinates","log","radius","extent","load","seriesData","datapoints","alias","target","addEditorTab","$timeout","cancel","nextTickPromise","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACEA,sB,kBAAAA,gB;;AAEKC,O;;AACAC,gB;;AAKAC,kB;;;;;;;;;;;;;;;;;;;;;AAGDC,mB,GAAgB;AACpBC,iBAAS,IADW;;AAGpBC,uBAAe;AACbC,qBAAW,MADE;AAEbC,qBAAW,MAFE;AAGbC,oBAAU,EAHG;AAIbC,sBAAY,OAJC;AAKbC,8BAAoB,KALP;AAMbC,4BAAkB,IANL;AAObC,uBAAa;AAPA;AAHK,O;;4BAcTC,U;;;AAEX,4BAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2C;AAAA;;AAAA,8HACnCF,MADmC,EAC3BC,SAD2B;;AAEzCf,YAAEiB,YAAF,CAAe,MAAKC,KAApB,EAA2Bf,aAA3B;;AAEA,gBAAKa,UAAL,GAAkBA,UAAlB;;AAEA,gBAAKG,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKC,cAAL,CAAoBC,IAApB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,gBAAf,EAAiC,MAAKG,eAAL,CAAqBD,IAArB,OAAjC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,mBAAf,EAAoC,MAAKI,MAAL,CAAYF,IAAZ,OAApC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,QAAf,EAAyB,MAAKK,QAAL,CAAcH,IAAd,OAAzB;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,eAAf,EAAgC,MAAKM,cAAL,CAAoBJ,IAApB,OAAhC;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,YAAf,EAA6B,MAAKO,WAAL,CAAiBL,IAAjB,OAA7B;AACA,gBAAKH,MAAL,CAAYC,EAAZ,CAAe,oBAAf,EAAqC,MAAKM,cAAL,CAAoBJ,IAApB,OAArC;;AAEA,gBAAKM,IAAL,GAAY,EAAZ;AACA,gBAAKC,QAAL,GAAgB,CAAC,OAAQC,KAAKC,MAAL,KAAgB,MAAzB,EAAkCC,OAAlC,CAA0C,GAA1C,EAA+C,EAA/C,CAAhB;AACA,gBAAKC,KAAL,GAAa,CAAC,OAAQH,KAAKC,MAAL,KAAgB,MAAzB,EAAkCC,OAAlC,CAA0C,GAA1C,EAA+C,EAA/C,CAAb;AACA,gBAAKE,GAAL,GAAW,IAAX;AACA,gBAAKC,GAAL,GAAW,IAAX;AACA,gBAAKC,OAAL,GAAe,IAAf;AACA,gBAAKC,KAAL,GAAa,IAAb;AACA,gBAAKC,KAAL,GAAa,KAAb;;AAEA,gBAAKC,SAAL;AAvByC;AAwB1C;;;;wCAEa;AACZ;AACA,iBAAKC,MAAL,GAAc,EAAd;AACA,iBAAKhB,MAAL;AACD;;;sCAEW;AACV;AACA,gBAAI,KAAKW,GAAL,IAAY,KAAKE,KAAjB,IAA0B,KAAKD,OAAnC,EAA4C;AAC1C;AACA,kBAAIK,SAAS,KAAKN,GAAL,CAASO,SAAT,EAAb;AACA,kBAAIC,OAAO,CAACF,OAAOG,OAAP,EAAD,EAAmBH,OAAOI,QAAP,EAAnB,EAAsCJ,OAAOK,OAAP,EAAtC,EAAwDL,OAAOM,QAAP,EAAxD,CAAX;AACA,kBAAIC,WAAW,KAAKX,KAAL,CAAWY,WAAX,CAAuBN,IAAvB,EAA6Bb,KAAKoB,KAAL,CAAW,KAAKf,GAAL,CAASgB,OAAT,EAAX,CAA7B,CAAf;AACA;AACA,mBAAKf,OAAL,CAAagB,WAAb;AACA,mBAAKhB,OAAL,CAAaiB,OAAb,CAAqBL,QAArB;AACD;AACF;;;0CAEeM,a,EAAeC,M,EAAQ;AACrC,gBAAMrB,MAAMqB,OAAOC,MAAP,CAAcC,UAAd,CAAyB,IAAzB,CAAZ;AACAvB,gBAAIwB,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBH,OAAOC,MAAP,CAAcG,KAAlC,EAAyCJ,OAAOC,MAAP,CAAcI,MAAvD;AACA1B,gBAAI2B,SAAJ,GAAgB,sBAAhB;AACA,iBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIlC,KAAKmC,MAAzB,EAAiCD,GAAjC,EAAsC;AACpC,kBAAIE,IAAIpC,KAAKkC,CAAL,CAAR;AACA,kBAAIP,OAAOd,MAAP,CAAcwB,QAAd,CAAuB,CAACD,EAAE,CAAF,CAAD,EAAOA,EAAE,CAAF,CAAP,CAAvB,CAAJ,EAA0C;AACxC,oBAAIE,MAAMZ,cAAca,IAAd,CAAmBC,sBAAnB,CAA0C,CAACJ,EAAE,CAAF,CAAD,EAAOA,EAAE,CAAF,CAAP,CAA1C,CAAV;AACA9B,oBAAImC,SAAJ;AACAnC,oBAAIoC,GAAJ,CAAQJ,IAAIK,CAAZ,EAAeL,IAAIM,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B1C,KAAK2C,EAAL,GAAU,CAAtC;AACAvC,oBAAIwC,IAAJ;AACAxC,oBAAIyC,SAAJ;AACD;AACF;AACF;;;qCAEU;AACT;AACA,gBAAI,KAAKzC,GAAL,IAAY,IAAhB,EAAsB;AACpB,kBAAI0C,SAASC,cAAT,CAAwB,KAAKhD,QAA7B,KAA0C,IAA9C,EAAoD;AAClD,qBAAKK,GAAL,GAAW0C,SAASC,cAAT,CAAwB,KAAKhD,QAA7B,EAAuC4B,UAAvC,CAAkD,IAAlD,CAAX;AACD;AACF;;AAED,gBAAI,KAAKtB,GAAL,IAAY,IAAhB,EAAsB;AACpB,mBAAKA,GAAL,GAAW2C,EAAE3C,GAAF,CAAM,KAAKF,KAAX,EAAkB8C,OAAlB,CAA0B,CAAC,EAAD,EAAK,EAAL,CAA1B,EAAoC,CAApC,CAAX;;AAEA;AACA,kBAAIC,SAAS,oDAAb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAIC,MAAM,IAAIH,EAAEI,SAAN,CAAgBF,MAAhB,EAAwB,EAAEG,SAAS,CAAX,EAAcC,SAAS,EAAvB,EAAxB,CAAV;AACA;AACA,mBAAKjD,GAAL,CAASkD,QAAT,CAAkBJ,GAAlB;;AAEA,mBAAK7C,OAAL,GAAe0C,EAAEQ,OAAF,CAAU,IAAV,EAAgB,EAAEC,cAAcC,iBAAhB,EAAhB,EAAqDC,KAArD,CAA2D,KAAKtD,GAAhE,CAAf;;AAEA,kBAAIuD,QAAQ,KAAKnD,SAAL,CAAejB,IAAf,CAAoB,IAApB,CAAZ;AACA,mBAAKa,GAAL,CAASf,EAAT,CAAY,SAAZ,EAAuBsE,KAAvB;;AAEA,kBAAIC,OAAO,IAAX;AACA,mBAAKvD,OAAL,CAAahB,EAAb,CAAgB,OAAhB,EAAyB,UAACwE,CAAD,EAAO;AAC9B,oBAAIC,YAAYD,EAAEE,KAAF,CAAQC,OAAR,CAAgBC,UAAhB,CAA2BC,UAA3C;AACA,oBAAIC,SAASN,EAAEO,MAAf;AACA,oBAAIC,aAAJ;AACA,oBAAIP,SAAJ,EAAe;AACbO,kCAAgBT,KAAKtD,KAAL,CAAWgE,uBAAX,CAAmCR,SAAnC,CAAhB;AACAF,uBAAKxD,GAAL,CAASmE,KAAT,CAAeJ,MAAf,EAAuBpE,KAAKoB,KAAL,CAAWkD,aAAX,CAAvB;AACD;AACF,eARD;;AAUA,kBAAI,CAAC,KAAK/D,KAAV,EAAiB;AACf,qBAAKE,SAAL;AACD;;AAED;AACA;AACA;AACD;;AAED,qBAASiD,iBAAT,CAA2BO,OAA3B,EAAoCI,MAApC,EAA4C;AAC1C,kBAAI,CAACJ,QAAQC,UAAR,CAAmBO,OAAxB,EAAiC,OAAOzB,EAAE0B,MAAF,CAASL,MAAT,CAAP;;AAEjC,kBAAMM,QAAQV,QAAQC,UAAR,CAAmBU,WAAjC;AACA,kBAAMC,OAAOF,QAAQ,GAAR,GAAc,OAAd,GAAwBA,QAAQ,IAAR,GAAe,QAAf,GAA0B,OAA/D;AACA,kBAAMG,OAAO9B,EAAE+B,OAAF,CAAU;AACrBC,sCAAoBf,QAAQC,UAAR,CAAmBe,uBAAvC,kBADqB;AAErBC,8DAA4CL,IAFvB;AAGrBM,0BAAUnC,EAAEoC,KAAF,CAAQ,EAAR,EAAY,EAAZ;AAHW,eAAV,CAAb;AAKA,qBAAOpC,EAAE0B,MAAF,CAASL,MAAT,EAAiB,EAAES,UAAF,EAAjB,CAAP;AACD;;AAED,iBAAKrE,SAAL;AACD;;;kDAEuB4E,Q,EAAU;AAChC,iBAAK5E,SAAL;AACD;;;yCAKc6E,Q,EAAU;AACvB;AACA,gBAAIA,QAAJ,EAAc;AACZ,kBAAIxF,OAAO,EAAX;AACAwF,uBAAS,CAAT,EAAYC,IAAZ,CAAiBC,OAAjB,CAAyB,UAASC,OAAT,EAAkB;AACzC,oBAAIA,WAAWA,QAAQ,CAAR,CAAf,EAA2B;AACzB,uBAAK,IAAIzD,IAAI,CAAb,EAAgBA,IAAIyD,QAAQ,CAAR,CAApB,EAAgCzD,GAAhC,EAAqC;AACnClC,yBAAK4F,IAAL,CACE;AACEC,4BAAM,SADR;AAEEzB,kCAAY;AACV0B,mCAAW,CADD;AAEVC,8BAAM,eAFI;AAGVC,iCAAS,IAHC;AAIVC,kCAAU,IAJA;AAKVC,+BAAOP,QAAQ,CAAR,CALG;AAMVQ,gCAAQR,QAAQ,CAAR,CANE;AAOVS,gCAAQ,eAPE;AAQVC,mCAAW,IARD;AASVC,sCAAc;AATJ,uBAFd;AAaEC,gCAAU;AACRV,8BAAM,OADE;AAERW,qCAAa,CAACb,QAAQ,CAAR,CAAD,EAAaA,QAAQ,CAAR,CAAb;AAFL;AAbZ,qBADF;AAmBD;AACF;AACF,eAxBD;AAyBA;;AAEA;AACA,mBAAKlF,KAAL,GAAanC,aAAa;AACxBmI,qBAAK,KADmB;AAExBC,wBAAQ,EAFgB;AAGxBC,wBAAQ,GAHgB;AAIxBnD,yBAAS;AAJe,eAAb,EAKVoD,IALU,CAKL5G,IALK,CAAb;AAMD;AACD,iBAAKW,SAAL;AACA,iBAAKf,MAAL;AACD;;;wCAKaiH,U,EAAY;AACxB;AACA,gBAAIjG,SAAS,IAAIvC,UAAJ,CAAe;AAC1ByI,0BAAYD,WAAWC,UADG;AAE1BC,qBAAOF,WAAWG;AAFQ,aAAf,CAAb;AAIA,mBAAOpG,MAAP;AACD;;;2CAEgB;AACf;AACA,iBAAKqG,YAAL,CAAkB,SAAlB,EAA6B,0CAA7B,EAAyE,CAAzE;AACD;;;4CAEiB;AAChB;AACA,iBAAKC,QAAL,CAAcC,MAAd,CAAqB,KAAKC,eAA1B;AACD;;;;QApM6BjJ,gB;;;;AAwMhCc,iBAAWoI,WAAX,GAAyB,aAAzB","file":"udsmap_ctrl.js","sourcesContent":["import {\n  MetricsPanelCtrl,\n} from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport TimeSeries from 'app/core/time_series';\n\nimport './css/udsmap-panel.css!';\nimport './leaflet/leaflet.css!';\nimport './leaflet/leaflet.js';\nimport supercluster from './leaflet/supercluster.min.js';\nimport './leaflet/L.CanvasOverlay.js';\n\nconst panelDefaults = {\n  bgColor: null,\n\n  graphSettings: {\n    fontColor: 'gray',\n    gridColor: 'gray',\n    fontSize: 14,\n    legendType: 'right',\n    ignoreTimeInfluxDB: false,\n    limitAspectRatio: true,\n    aspectRatio: 2.2,\n  },\n};\n\nexport class UdsMapCtrl extends MetricsPanelCtrl {\n\n  constructor($scope, $injector, $rootScope) {\n    super($scope, $injector);\n    _.defaultsDeep(this.panel, panelDefaults);\n\n    this.$rootScope = $rootScope;\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    this.events.on('panel-teardown', this.onPanelTeardown.bind(this));\n    this.events.on('panel-initialized', this.render.bind(this));\n    this.events.on('render', this.onRender.bind(this));\n    this.events.on('data-received', this.onDataReceived.bind(this));\n    this.events.on('data-error', this.onDataError.bind(this));\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n\n    this.data = [];\n    this.canvasid = ('id' + (Math.random() * 100000)).replace('.', '');\n    this.divid = ('id' + (Math.random() * 100000)).replace('.', '');\n    this.ctx = null;\n    this.map = null;\n    this.markers = null;\n    this.index = null;\n    this.ready = false;\n\n    this.updateMap();\n  }\n\n  onDataError() {\n    //console.log('Data error');\n    this.series = [];\n    this.render();\n  }\n\n  updateMap() {\n    //console.log('updateMap ?', this.map, this.index, this.markers);\n    if (this.map && this.index && this.markers) {\n      //console.log('updateMap - YES');\n      var bounds = this.map.getBounds();\n      var bbox = [bounds.getWest(), bounds.getSouth(), bounds.getEast(), bounds.getNorth()];\n      var clusters = this.index.getClusters(bbox, Math.floor(this.map.getZoom()));\n      //console.log('clusters: ', clusters);\n      this.markers.clearLayers();\n      this.markers.addData(clusters);\n    }\n  }\n\n  drawingOnCanvas(canvasOverlay, params) {\n    const ctx = params.canvas.getContext('2d');\n    ctx.clearRect(0, 0, params.canvas.width, params.canvas.height);\n    ctx.fillStyle = 'rgba(255,116,0, 0.2)';\n    for (var i = 0; i < data.length; i++) {\n      var d = data[i];\n      if (params.bounds.contains([d[0], d[1]])) {\n        var dot = canvasOverlay._map.latLngToContainerPoint([d[0], d[1]]);\n        ctx.beginPath();\n        ctx.arc(dot.x, dot.y, 3, 0, Math.PI * 2);\n        ctx.fill();\n        ctx.closePath();\n      }\n    }\n  }\n\n  onRender() {\n    //console.log('render!');\n    if (this.ctx == null) {\n      if (document.getElementById(this.canvasid) != null) {\n        this.ctx = document.getElementById(this.canvasid).getContext('2d');\n      }\n    }\n\n    if (this.map == null) {\n      this.map = L.map(this.divid).setView([24, 32], 2);\n\n      // create the tile layer with correct attribution\n      var osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n      //var osmUrl='http://{s}.sm.mapstack.stamen.com/(toner,$212124[@2],$212124[@20],$212124[@60])/{z}/{x}/{y}.png';\n      //var osmUrl='http://{s}.sm.mapstack.stamen.com/(toner,$fff[difference],$fff[@23],$fff[hsl-saturation@20])/{z}/{x}/{y}.png';\n      //var osmUrl='http://{s}.sm.mapstack.stamen.com/(toner,mask=!mapbox-water,alpha=60)/{z}/{x}/{y}.png';\n      //var osmAttrib = 'Map data © <a href=\"https://openstreetmap.org\">OpenStreetMap</a> contributors';\n      //var osm = new L.TileLayer(osmUrl, {minZoom: 1, maxZoom: 13, attribution: osmAttrib});\n      var osm = new L.TileLayer(osmUrl, { minZoom: 1, maxZoom: 13 });\n      // start the map in South-East England\n      this.map.addLayer(osm);\n\n      this.markers = L.geoJson(null, { pointToLayer: createClusterIcon }).addTo(this.map);\n\n      var bound = this.updateMap.bind(this);\n      this.map.on('moveend', bound);\n\n      var that = this;\n      this.markers.on('click', (e) => {\n        var clusterId = e.layer.feature.properties.cluster_id;\n        var center = e.latlng;\n        var expansionZoom;\n        if (clusterId) {\n          expansionZoom = that.index.getClusterExpansionZoom(clusterId);\n          that.map.flyTo(center, Math.floor(expansionZoom));\n        }\n      });\n\n      if (!this.index) {\n        this.updateMap();\n      }\n\n      //.load(geojson.features);\n      //.load(); // Expects an array of Features. geojson.features\n      //L.canvasOverlay().drawing(this.drawingOnCanvas).addTo(this.map);\n    }\n\n    function createClusterIcon(feature, latlng) {\n      if (!feature.properties.cluster) return L.marker(latlng);\n\n      const count = feature.properties.point_count;\n      const size = count < 100 ? 'small' : count < 1000 ? 'medium' : 'large';\n      const icon = L.divIcon({\n        html: `<div><span>${feature.properties.point_count_abbreviated}</span></div>`,\n        className: `marker-cluster marker-cluster-${size}`,\n        iconSize: L.point(40, 40),\n      });\n      return L.marker(latlng, { icon });\n    }\n\n    this.updateMap();\n  }\n\n  decodeNonHistoricalData(fulldata) {\n    this.updateMap();\n  }\n\n  //***************************************************\n  // Data received\n  //***************************************************\n  onDataReceived(dataList) {\n    //console.log('dataList: ', dataList);\n    if (dataList) {\n      var data = [];\n      dataList[0].rows.forEach(function(element) {\n        if (element && element[0]) {\n          for (let i = 0; i < element[2]; i++) {\n            data.push(\n              {\n                type: 'Feature',\n                properties: {\n                  scalerank: 2,\n                  name: 'Niagara Falls',\n                  comment: null,\n                  name_alt: null,\n                  lat_y: element[1],\n                  long_x: element[0],\n                  region: 'North America',\n                  subregion: null,\n                  featureclass: 'waterfall',\n                },\n                geometry: {\n                  type: 'Point',\n                  coordinates: [element[1], element[0]],\n                },\n              });\n          }\n        }\n      });\n      //console.log('transformed data:', data);\n\n      // Retrieve Points data.\n      this.index = supercluster({\n        log: false,\n        radius: 60,\n        extent: 256,\n        maxZoom: 17,\n      }).load(data);\n    }\n    this.updateMap();\n    this.render();\n  }\n\n  //***************************************************\n  // seriesHandler\n  //***************************************************\n  seriesHandler(seriesData) {\n    //console.log('seriesData', seriesData);\n    var series = new TimeSeries({\n      datapoints: seriesData.datapoints,\n      alias: seriesData.target,\n    });\n    return series;\n  }\n\n  onInitEditMode() {\n    //console.log('onInitEditMode');\n    this.addEditorTab('Options', 'public/plugins/uds-map-panel/editor.html', 2);\n  }\n\n  onPanelTeardown() {\n    //console.log('onPanelTeardown');\n    this.$timeout.cancel(this.nextTickPromise);\n  }\n\n}\n\nUdsMapCtrl.templateUrl = 'module.html';"]}